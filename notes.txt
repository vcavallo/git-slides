# notes

## git's object model

`git cat-file`
`git ls-tree`

### the blob

a buncha bytes. could be any type of file whatsoever

### the tree

a directory tree. use `ls-tree` on it to view the snapshot of blobs at that commit

### parent

the commit this commit points to. use `cat-file -t` to see that it's a commit.
use `-p` to see the content of the commit (its tree, the parent, the message,
author, etc.)

## reflog

- talk about this.

## git-imerge

- talk about this. look for presenter's slides for the imerge graphs


# live demo steps

- create readme
- git add readme
- git log - this is boring
- git-generate-history (briefly mention what this does and that git makes it available for this exact purpose)
- git log - now there's some stuff there
- git cat-file -t the last commit: this is a 'commit' (our first type)
- git cat-file -p the last commit: here are all the details for the commit.
- tree? git cat-file -t the tree: this is a 'tree' (our second type)
- what's this tree thing? we'll think of this as a snapshot of the filesystem at that commit.
    - insert talk about tree
- git ls-tree that tree: this looks familiar...
- what are these blobs? bunch of bytes - could be any file
    - insert talk about blob
- git cat-file -t readme.md: this is a 'blob' (our third type)
- git cat-file -p readme.md: hey whatdya know. the content.
- git cat-file the last commit again
- what's this parent thing?
- git cat-file -t the parent hash: hey, it's a commit. that's already one of our things.
- peek at the git log: what's before the last commit? note the message.
- git cat-file -p the parent hash: it's that previous commit. this is the linkage in the history.
- go into the filesystem: tree .git. notice all the .git/objects. let's see if we can notice anything useful about this mess...
- git cat-file -p our last commit... notice that the commit hash is a folder/file pair
- file .git/objects/1a/fjk324kl23j423....
- when we're doing `cat-file` that nice little bit of plumbing is printing that ^ for us
- also show that the tree is in here.
- also show that the bobs are in here.
- in here: trees, blobs, commits. our three objects.
- what's the last thing we've not covered yet.....? BRANCHES! of course.
- where are the branches in this objects folder....? tree .git/{objects,refs}
- what's this heads directory? i see 'master' in here, that sounds familiar...
- checkout a new branch
- ls .git/refs/heads
- cat .git/refs/heads/hello-im-a-branch
- does this look familiar...? it's the last commit.
- so we see a 'branch' is really just a teeny text file with a commit as its contents
- hey what about the master branch? cat .git/refs/heads/master
- same thing.... ah - our branches haven't diverged at all.
- make sure you're on new branch
- generate a new file.
- cat the new branch ref again - it's the newest commit.
- there's one final piece. what's HEAD? how does that work?
- well it's all just a filesystem, let's look for it....
- ls -lh .git --- what's this HEAD thing.... maybe we cat it?
- hey, it's got some record of a ref in it - which we know are essentially
  containers for a commit now.
- checkout master
- cat .git/HEAD again. no surprise here...
